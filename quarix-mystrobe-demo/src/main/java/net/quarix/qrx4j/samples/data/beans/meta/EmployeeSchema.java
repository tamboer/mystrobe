package net.quarix.qrx4j.samples.data.beans.meta;

import net.quarix.qrx4j.samples.data.beans.Employee;
import java.util.LinkedHashMap;
import net.mystrobe.client.connector.quarixbackend.Generated;
import net.mystrobe.client.impl.DAOSchema;
import net.mystrobe.client.SchemaColumnProperties;
import java.util.Map;
import net.mystrobe.client.connector.quarixbackend.GeneratorMeta;
import java.util.HashMap;

/**
 *
 * This class was generated by net.mystrobe.client.connector.quarixbackend.ClassGenerator
 *
 * Used parameters:
 *		appName: mystrobe
 *		 dsName: wicketds.server.dmemployee
 *		 doName: ttemployee
 *
 */

@GeneratorMeta(appName="mystrobe", urn="wicketds.server.dmemployee", dsName="wicketds.server.dmemployee", dsId="daoemployee", daoId="ttemployee", isLocked=false)
public class EmployeeSchema extends DAOSchema<Employee> {

	@Generated
	public enum Cols {
		
		SORTORDER("sortorder"),
		EMPNUM("empnum"),
		ADDRESS("address"),
		ADDRESS2("address2"),
		BIRTHDATE("birthdate"),
		CITY("city"),
		DEPTCODE("deptcode"),
		FIRSTNAME("firstname"),
		LASTNAME("lastname"),
		HOMEPHONE("homephone"),
		WORKPHONE("workphone"),
		POSITION("position"),
		STARTDATE("startdate"),
		POSTALCODE("postalcode"),
		STATE("state"),
		DEPTNAME("deptname"),
		STATENAME("statename")
		;

		private String columnName;
			
		private Cols(String columnName) {
			this.columnName = columnName;
		}

		public String id() {
			return columnName;
		}	

		public String toString() {
			return columnName;
		}
	}

	@Generated
	public EmployeeSchema() {
		assignValues();
	}

	@Generated
	protected void assignValues() {
		super.assignValues();
		daoId = "ttemployee";
		iDataTypeClass = Employee.class;
		margin = 5;
		isAutosync = true;
		isSetFilterEveryTime = true;

		properties = new LinkedHashMap<String, Map<SchemaColumnProperties, String>>();

		Map<SchemaColumnProperties, String> rowidProp = new HashMap<SchemaColumnProperties, String>();
		rowidProp.put(SchemaColumnProperties.ReadOnly, "");
		rowidProp.put(SchemaColumnProperties.Format, "");
		rowidProp.put(SchemaColumnProperties.Type, "character");
		rowidProp.put(SchemaColumnProperties.DefaultValue, "");
		rowidProp.put(SchemaColumnProperties.Required, "");
		rowidProp.put(SchemaColumnProperties.Sortable, "");
		rowidProp.put(SchemaColumnProperties.Label, "");
		rowidProp.put(SchemaColumnProperties.Tooltip, "");
		rowidProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowid", rowidProp);

		Map<SchemaColumnProperties, String> rowstateProp = new HashMap<SchemaColumnProperties, String>();
		rowstateProp.put(SchemaColumnProperties.ReadOnly, "");
		rowstateProp.put(SchemaColumnProperties.Format, "");
		rowstateProp.put(SchemaColumnProperties.Type, "integer");
		rowstateProp.put(SchemaColumnProperties.DefaultValue, "0");
		rowstateProp.put(SchemaColumnProperties.Required, "");
		rowstateProp.put(SchemaColumnProperties.Sortable, "");
		rowstateProp.put(SchemaColumnProperties.Label, "");
		rowstateProp.put(SchemaColumnProperties.Tooltip, "");
		rowstateProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowstate", rowstateProp);

		Map<SchemaColumnProperties, String> sortorderProp = new HashMap<SchemaColumnProperties, String>();
		sortorderProp.put(SchemaColumnProperties.ReadOnly, "");
		sortorderProp.put(SchemaColumnProperties.Format, "->,>>>,>>9");
		sortorderProp.put(SchemaColumnProperties.Type, "integer");
		sortorderProp.put(SchemaColumnProperties.DefaultValue, "0");
		sortorderProp.put(SchemaColumnProperties.Required, "false");
		sortorderProp.put(SchemaColumnProperties.Sortable, "true ");
		sortorderProp.put(SchemaColumnProperties.Label, "SortOrder");
		sortorderProp.put(SchemaColumnProperties.Tooltip, "");
		sortorderProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("sortorder", sortorderProp);

		Map<SchemaColumnProperties, String> empnumProp = new HashMap<SchemaColumnProperties, String>();
		empnumProp.put(SchemaColumnProperties.ReadOnly, "");
		empnumProp.put(SchemaColumnProperties.Format, "->,>>>,>>9");
		empnumProp.put(SchemaColumnProperties.Type, "integer");
		empnumProp.put(SchemaColumnProperties.DefaultValue, "0");
		empnumProp.put(SchemaColumnProperties.Required, "false");
		empnumProp.put(SchemaColumnProperties.Sortable, "true ");
		empnumProp.put(SchemaColumnProperties.Label, "EmpNum");
		empnumProp.put(SchemaColumnProperties.Tooltip, "");
		empnumProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("empnum", empnumProp);

		Map<SchemaColumnProperties, String> addressProp = new HashMap<SchemaColumnProperties, String>();
		addressProp.put(SchemaColumnProperties.ReadOnly, "");
		addressProp.put(SchemaColumnProperties.Format, "x(8)");
		addressProp.put(SchemaColumnProperties.Type, "character");
		addressProp.put(SchemaColumnProperties.DefaultValue, "");
		addressProp.put(SchemaColumnProperties.Required, "false");
		addressProp.put(SchemaColumnProperties.Sortable, "false");
		addressProp.put(SchemaColumnProperties.Label, "Address");
		addressProp.put(SchemaColumnProperties.Tooltip, "");
		addressProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("address", addressProp);

		Map<SchemaColumnProperties, String> address2Prop = new HashMap<SchemaColumnProperties, String>();
		address2Prop.put(SchemaColumnProperties.ReadOnly, "");
		address2Prop.put(SchemaColumnProperties.Format, "x(8)");
		address2Prop.put(SchemaColumnProperties.Type, "character");
		address2Prop.put(SchemaColumnProperties.DefaultValue, "");
		address2Prop.put(SchemaColumnProperties.Required, "false");
		address2Prop.put(SchemaColumnProperties.Sortable, "false");
		address2Prop.put(SchemaColumnProperties.Label, "Address2");
		address2Prop.put(SchemaColumnProperties.Tooltip, "");
		address2Prop.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("address2", address2Prop);

		Map<SchemaColumnProperties, String> birthdateProp = new HashMap<SchemaColumnProperties, String>();
		birthdateProp.put(SchemaColumnProperties.ReadOnly, "");
		birthdateProp.put(SchemaColumnProperties.Format, "99/99/99");
		birthdateProp.put(SchemaColumnProperties.Type, "date");
		birthdateProp.put(SchemaColumnProperties.DefaultValue, "?");
		birthdateProp.put(SchemaColumnProperties.Required, "false");
		birthdateProp.put(SchemaColumnProperties.Sortable, "false");
		birthdateProp.put(SchemaColumnProperties.Label, "Birthdate");
		birthdateProp.put(SchemaColumnProperties.Tooltip, "");
		birthdateProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("birthdate", birthdateProp);

		Map<SchemaColumnProperties, String> cityProp = new HashMap<SchemaColumnProperties, String>();
		cityProp.put(SchemaColumnProperties.ReadOnly, "");
		cityProp.put(SchemaColumnProperties.Format, "x(8)");
		cityProp.put(SchemaColumnProperties.Type, "character");
		cityProp.put(SchemaColumnProperties.DefaultValue, "");
		cityProp.put(SchemaColumnProperties.Required, "false");
		cityProp.put(SchemaColumnProperties.Sortable, "false");
		cityProp.put(SchemaColumnProperties.Label, "City");
		cityProp.put(SchemaColumnProperties.Tooltip, "");
		cityProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("city", cityProp);

		Map<SchemaColumnProperties, String> deptcodeProp = new HashMap<SchemaColumnProperties, String>();
		deptcodeProp.put(SchemaColumnProperties.ReadOnly, "");
		deptcodeProp.put(SchemaColumnProperties.Format, "x(8)");
		deptcodeProp.put(SchemaColumnProperties.Type, "character");
		deptcodeProp.put(SchemaColumnProperties.DefaultValue, "");
		deptcodeProp.put(SchemaColumnProperties.Required, "false");
		deptcodeProp.put(SchemaColumnProperties.Sortable, "false");
		deptcodeProp.put(SchemaColumnProperties.Label, "DeptCode");
		deptcodeProp.put(SchemaColumnProperties.Tooltip, "");
		deptcodeProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("deptcode", deptcodeProp);

		Map<SchemaColumnProperties, String> firstnameProp = new HashMap<SchemaColumnProperties, String>();
		firstnameProp.put(SchemaColumnProperties.ReadOnly, "");
		firstnameProp.put(SchemaColumnProperties.Format, "x(8)");
		firstnameProp.put(SchemaColumnProperties.Type, "character");
		firstnameProp.put(SchemaColumnProperties.DefaultValue, "");
		firstnameProp.put(SchemaColumnProperties.Required, "false");
		firstnameProp.put(SchemaColumnProperties.Sortable, "false");
		firstnameProp.put(SchemaColumnProperties.Label, "FirstName");
		firstnameProp.put(SchemaColumnProperties.Tooltip, "");
		firstnameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("firstname", firstnameProp);

		Map<SchemaColumnProperties, String> lastnameProp = new HashMap<SchemaColumnProperties, String>();
		lastnameProp.put(SchemaColumnProperties.ReadOnly, "");
		lastnameProp.put(SchemaColumnProperties.Format, "x(8)");
		lastnameProp.put(SchemaColumnProperties.Type, "character");
		lastnameProp.put(SchemaColumnProperties.DefaultValue, "");
		lastnameProp.put(SchemaColumnProperties.Required, "false");
		lastnameProp.put(SchemaColumnProperties.Sortable, "false");
		lastnameProp.put(SchemaColumnProperties.Label, "LastName");
		lastnameProp.put(SchemaColumnProperties.Tooltip, "");
		lastnameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("lastname", lastnameProp);

		Map<SchemaColumnProperties, String> homephoneProp = new HashMap<SchemaColumnProperties, String>();
		homephoneProp.put(SchemaColumnProperties.ReadOnly, "");
		homephoneProp.put(SchemaColumnProperties.Format, "x(8)");
		homephoneProp.put(SchemaColumnProperties.Type, "character");
		homephoneProp.put(SchemaColumnProperties.DefaultValue, "");
		homephoneProp.put(SchemaColumnProperties.Required, "false");
		homephoneProp.put(SchemaColumnProperties.Sortable, "false");
		homephoneProp.put(SchemaColumnProperties.Label, "HomePhone");
		homephoneProp.put(SchemaColumnProperties.Tooltip, "");
		homephoneProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("homephone", homephoneProp);

		Map<SchemaColumnProperties, String> workphoneProp = new HashMap<SchemaColumnProperties, String>();
		workphoneProp.put(SchemaColumnProperties.ReadOnly, "");
		workphoneProp.put(SchemaColumnProperties.Format, "x(8)");
		workphoneProp.put(SchemaColumnProperties.Type, "character");
		workphoneProp.put(SchemaColumnProperties.DefaultValue, "");
		workphoneProp.put(SchemaColumnProperties.Required, "false");
		workphoneProp.put(SchemaColumnProperties.Sortable, "false");
		workphoneProp.put(SchemaColumnProperties.Label, "WorkPhone");
		workphoneProp.put(SchemaColumnProperties.Tooltip, "");
		workphoneProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("workphone", workphoneProp);

		Map<SchemaColumnProperties, String> positionProp = new HashMap<SchemaColumnProperties, String>();
		positionProp.put(SchemaColumnProperties.ReadOnly, "");
		positionProp.put(SchemaColumnProperties.Format, "x(8)");
		positionProp.put(SchemaColumnProperties.Type, "character");
		positionProp.put(SchemaColumnProperties.DefaultValue, "");
		positionProp.put(SchemaColumnProperties.Required, "false");
		positionProp.put(SchemaColumnProperties.Sortable, "false");
		positionProp.put(SchemaColumnProperties.Label, "Position");
		positionProp.put(SchemaColumnProperties.Tooltip, "");
		positionProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("position", positionProp);

		Map<SchemaColumnProperties, String> startdateProp = new HashMap<SchemaColumnProperties, String>();
		startdateProp.put(SchemaColumnProperties.ReadOnly, "");
		startdateProp.put(SchemaColumnProperties.Format, "99/99/99");
		startdateProp.put(SchemaColumnProperties.Type, "date");
		startdateProp.put(SchemaColumnProperties.DefaultValue, "?");
		startdateProp.put(SchemaColumnProperties.Required, "false");
		startdateProp.put(SchemaColumnProperties.Sortable, "false");
		startdateProp.put(SchemaColumnProperties.Label, "StartDate");
		startdateProp.put(SchemaColumnProperties.Tooltip, "");
		startdateProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("startdate", startdateProp);

		Map<SchemaColumnProperties, String> postalcodeProp = new HashMap<SchemaColumnProperties, String>();
		postalcodeProp.put(SchemaColumnProperties.ReadOnly, "");
		postalcodeProp.put(SchemaColumnProperties.Format, "x(8)");
		postalcodeProp.put(SchemaColumnProperties.Type, "character");
		postalcodeProp.put(SchemaColumnProperties.DefaultValue, "");
		postalcodeProp.put(SchemaColumnProperties.Required, "false");
		postalcodeProp.put(SchemaColumnProperties.Sortable, "false");
		postalcodeProp.put(SchemaColumnProperties.Label, "PostalCode");
		postalcodeProp.put(SchemaColumnProperties.Tooltip, "");
		postalcodeProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("postalcode", postalcodeProp);

		Map<SchemaColumnProperties, String> stateProp = new HashMap<SchemaColumnProperties, String>();
		stateProp.put(SchemaColumnProperties.ReadOnly, "");
		stateProp.put(SchemaColumnProperties.Format, "x(8)");
		stateProp.put(SchemaColumnProperties.Type, "character");
		stateProp.put(SchemaColumnProperties.DefaultValue, "");
		stateProp.put(SchemaColumnProperties.Required, "false");
		stateProp.put(SchemaColumnProperties.Sortable, "false");
		stateProp.put(SchemaColumnProperties.Label, "State");
		stateProp.put(SchemaColumnProperties.Tooltip, "");
		stateProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("state", stateProp);

		Map<SchemaColumnProperties, String> deptnameProp = new HashMap<SchemaColumnProperties, String>();
		deptnameProp.put(SchemaColumnProperties.ReadOnly, "");
		deptnameProp.put(SchemaColumnProperties.Format, "x(8)");
		deptnameProp.put(SchemaColumnProperties.Type, "character");
		deptnameProp.put(SchemaColumnProperties.DefaultValue, "");
		deptnameProp.put(SchemaColumnProperties.Required, "false");
		deptnameProp.put(SchemaColumnProperties.Sortable, "false");
		deptnameProp.put(SchemaColumnProperties.Label, "DeptName");
		deptnameProp.put(SchemaColumnProperties.Tooltip, "");
		deptnameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("deptname", deptnameProp);

		Map<SchemaColumnProperties, String> statenameProp = new HashMap<SchemaColumnProperties, String>();
		statenameProp.put(SchemaColumnProperties.ReadOnly, "");
		statenameProp.put(SchemaColumnProperties.Format, "x(8)");
		statenameProp.put(SchemaColumnProperties.Type, "character");
		statenameProp.put(SchemaColumnProperties.DefaultValue, "");
		statenameProp.put(SchemaColumnProperties.Required, "false");
		statenameProp.put(SchemaColumnProperties.Sortable, "false");
		statenameProp.put(SchemaColumnProperties.Label, "StateName");
		statenameProp.put(SchemaColumnProperties.Tooltip, "");
		statenameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("statename", statenameProp);
	}
	
}

