package net.quarix.qrx4j.samples.data.beans.meta;

import java.util.LinkedHashMap;
import net.mystrobe.client.connector.quarixbackend.Generated;
import net.mystrobe.client.impl.DAOSchema;
import net.mystrobe.client.SchemaColumnProperties;
import java.util.Map;
import net.quarix.qrx4j.samples.data.beans.Customer;
import net.mystrobe.client.connector.quarixbackend.GeneratorMeta;
import java.util.HashMap;

/**
 *
 * This class was generated by net.mystrobe.client.connector.quarixbackend.ClassGenerator
 *
 * Used parameters:
 *		appName: qrxexmpl
 *		 dsName: wicketds.server.dmcustomer
 *		 doName: ttcustomer
 *
 */

@GeneratorMeta(appName="qrxexmpl", urn="wicketds.server.dmcustomer", dsName="wicketds.server.dmcustomer", dsId="daocustomer", daoId="ttcustomer", isLocked=false)
public class CustomerSchema extends DAOSchema<Customer> {

	@Generated
	public enum Cols {
		
		SORTORDER("sortorder"),
		ADDRESS("address"),
		ADDRESS2("address2"),
		BALANCE("balance"),
		CITY("city"),
		COMMENTS("comments"),
		CONTACT("contact"),
		COUNTRY("country"),
		CREDITLIMIT("creditlimit"),
		CUSTNUM("custnum"),
		DISCOUNT("discount"),
		EMAILADDRESS("emailaddress"),
		FAX("fax"),
		NAME("name"),
		PHONE("phone"),
		POSTALCODE("postalcode"),
		SALESREP("salesrep"),
		STATE("state"),
		TERMS("terms"),
		STATENAME("statename"),
		SALESREPNAME("salesrepname")
		;

		private String columnName;
			
		private Cols(String columnName) {
			this.columnName = columnName;
		}

		public String id() {
			return columnName;
		}	

		public String toString() {
			return columnName;
		}
	}

	@Generated
	public CustomerSchema() {
		asignValues();
	}

	@Generated
	private void asignValues() {
		daoId = "ttcustomer";
		iDataTypeClass = Customer.class;
		batchSize = 50;
		margin = 5;
		isAutosync = true;
		isSetFilterEveryTime = true;

		properties = new LinkedHashMap<String, Map<SchemaColumnProperties, String>>();

		Map<SchemaColumnProperties, String> rowidProp = new HashMap<SchemaColumnProperties, String>();
		rowidProp.put(SchemaColumnProperties.ReadOnly, "");
		rowidProp.put(SchemaColumnProperties.Format, "");
		rowidProp.put(SchemaColumnProperties.Type, "character");
		rowidProp.put(SchemaColumnProperties.DefaultValue, "");
		rowidProp.put(SchemaColumnProperties.Required, "");
		rowidProp.put(SchemaColumnProperties.Sortable, "");
		rowidProp.put(SchemaColumnProperties.Label, "");
		rowidProp.put(SchemaColumnProperties.Tooltip, "");
		rowidProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowid", rowidProp);

		Map<SchemaColumnProperties, String> rowstateProp = new HashMap<SchemaColumnProperties, String>();
		rowstateProp.put(SchemaColumnProperties.ReadOnly, "");
		rowstateProp.put(SchemaColumnProperties.Format, "");
		rowstateProp.put(SchemaColumnProperties.Type, "integer");
		rowstateProp.put(SchemaColumnProperties.DefaultValue, "0");
		rowstateProp.put(SchemaColumnProperties.Required, "");
		rowstateProp.put(SchemaColumnProperties.Sortable, "");
		rowstateProp.put(SchemaColumnProperties.Label, "");
		rowstateProp.put(SchemaColumnProperties.Tooltip, "");
		rowstateProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowstate", rowstateProp);

		Map<SchemaColumnProperties, String> sortorderProp = new HashMap<SchemaColumnProperties, String>();
		sortorderProp.put(SchemaColumnProperties.ReadOnly, "");
		sortorderProp.put(SchemaColumnProperties.Format, "->.>>>.>>9");
		sortorderProp.put(SchemaColumnProperties.Type, "integer");
		sortorderProp.put(SchemaColumnProperties.DefaultValue, "0");
		sortorderProp.put(SchemaColumnProperties.Required, "false");
		sortorderProp.put(SchemaColumnProperties.Sortable, "true ");
		sortorderProp.put(SchemaColumnProperties.Label, "SortOrder");
		sortorderProp.put(SchemaColumnProperties.Tooltip, "");
		sortorderProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("sortorder", sortorderProp);

		Map<SchemaColumnProperties, String> addressProp = new HashMap<SchemaColumnProperties, String>();
		addressProp.put(SchemaColumnProperties.ReadOnly, "");
		addressProp.put(SchemaColumnProperties.Format, "x(8)");
		addressProp.put(SchemaColumnProperties.Type, "character");
		addressProp.put(SchemaColumnProperties.DefaultValue, "");
		addressProp.put(SchemaColumnProperties.Required, "false");
		addressProp.put(SchemaColumnProperties.Sortable, "false");
		addressProp.put(SchemaColumnProperties.Label, "Address");
		addressProp.put(SchemaColumnProperties.Tooltip, "");
		addressProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("address", addressProp);

		Map<SchemaColumnProperties, String> address2Prop = new HashMap<SchemaColumnProperties, String>();
		address2Prop.put(SchemaColumnProperties.ReadOnly, "");
		address2Prop.put(SchemaColumnProperties.Format, "x(8)");
		address2Prop.put(SchemaColumnProperties.Type, "character");
		address2Prop.put(SchemaColumnProperties.DefaultValue, "");
		address2Prop.put(SchemaColumnProperties.Required, "false");
		address2Prop.put(SchemaColumnProperties.Sortable, "false");
		address2Prop.put(SchemaColumnProperties.Label, "Address2");
		address2Prop.put(SchemaColumnProperties.Tooltip, "");
		address2Prop.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("address2", address2Prop);

		Map<SchemaColumnProperties, String> balanceProp = new HashMap<SchemaColumnProperties, String>();
		balanceProp.put(SchemaColumnProperties.ReadOnly, "");
		balanceProp.put(SchemaColumnProperties.Format, "->>.>>9,99");
		balanceProp.put(SchemaColumnProperties.Type, "decimal");
		balanceProp.put(SchemaColumnProperties.DefaultValue, "0,00");
		balanceProp.put(SchemaColumnProperties.Required, "false");
		balanceProp.put(SchemaColumnProperties.Sortable, "false");
		balanceProp.put(SchemaColumnProperties.Label, "Balance");
		balanceProp.put(SchemaColumnProperties.Tooltip, "");
		balanceProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("balance", balanceProp);

		Map<SchemaColumnProperties, String> cityProp = new HashMap<SchemaColumnProperties, String>();
		cityProp.put(SchemaColumnProperties.ReadOnly, "");
		cityProp.put(SchemaColumnProperties.Format, "x(8)");
		cityProp.put(SchemaColumnProperties.Type, "character");
		cityProp.put(SchemaColumnProperties.DefaultValue, "");
		cityProp.put(SchemaColumnProperties.Required, "false");
		cityProp.put(SchemaColumnProperties.Sortable, "false");
		cityProp.put(SchemaColumnProperties.Label, "City");
		cityProp.put(SchemaColumnProperties.Tooltip, "");
		cityProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("city", cityProp);

		Map<SchemaColumnProperties, String> commentsProp = new HashMap<SchemaColumnProperties, String>();
		commentsProp.put(SchemaColumnProperties.ReadOnly, "");
		commentsProp.put(SchemaColumnProperties.Format, "x(8)");
		commentsProp.put(SchemaColumnProperties.Type, "character");
		commentsProp.put(SchemaColumnProperties.DefaultValue, "");
		commentsProp.put(SchemaColumnProperties.Required, "false");
		commentsProp.put(SchemaColumnProperties.Sortable, "false");
		commentsProp.put(SchemaColumnProperties.Label, "Comments");
		commentsProp.put(SchemaColumnProperties.Tooltip, "");
		commentsProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("comments", commentsProp);

		Map<SchemaColumnProperties, String> contactProp = new HashMap<SchemaColumnProperties, String>();
		contactProp.put(SchemaColumnProperties.ReadOnly, "");
		contactProp.put(SchemaColumnProperties.Format, "x(8)");
		contactProp.put(SchemaColumnProperties.Type, "character");
		contactProp.put(SchemaColumnProperties.DefaultValue, "");
		contactProp.put(SchemaColumnProperties.Required, "false");
		contactProp.put(SchemaColumnProperties.Sortable, "false");
		contactProp.put(SchemaColumnProperties.Label, "Contact");
		contactProp.put(SchemaColumnProperties.Tooltip, "");
		contactProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("contact", contactProp);

		Map<SchemaColumnProperties, String> countryProp = new HashMap<SchemaColumnProperties, String>();
		countryProp.put(SchemaColumnProperties.ReadOnly, "");
		countryProp.put(SchemaColumnProperties.Format, "x(8)");
		countryProp.put(SchemaColumnProperties.Type, "character");
		countryProp.put(SchemaColumnProperties.DefaultValue, "");
		countryProp.put(SchemaColumnProperties.Required, "false");
		countryProp.put(SchemaColumnProperties.Sortable, "false");
		countryProp.put(SchemaColumnProperties.Label, "Country");
		countryProp.put(SchemaColumnProperties.Tooltip, "");
		countryProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("country", countryProp);

		Map<SchemaColumnProperties, String> creditlimitProp = new HashMap<SchemaColumnProperties, String>();
		creditlimitProp.put(SchemaColumnProperties.ReadOnly, "");
		creditlimitProp.put(SchemaColumnProperties.Format, "->>.>>9,99");
		creditlimitProp.put(SchemaColumnProperties.Type, "decimal");
		creditlimitProp.put(SchemaColumnProperties.DefaultValue, "0,00");
		creditlimitProp.put(SchemaColumnProperties.Required, "false");
		creditlimitProp.put(SchemaColumnProperties.Sortable, "false");
		creditlimitProp.put(SchemaColumnProperties.Label, "CreditLimit");
		creditlimitProp.put(SchemaColumnProperties.Tooltip, "");
		creditlimitProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("creditlimit", creditlimitProp);

		Map<SchemaColumnProperties, String> custnumProp = new HashMap<SchemaColumnProperties, String>();
		custnumProp.put(SchemaColumnProperties.ReadOnly, "");
		custnumProp.put(SchemaColumnProperties.Format, "->.>>>.>>9");
		custnumProp.put(SchemaColumnProperties.Type, "integer");
		custnumProp.put(SchemaColumnProperties.DefaultValue, "0");
		custnumProp.put(SchemaColumnProperties.Required, "false");
		custnumProp.put(SchemaColumnProperties.Sortable, "true ");
		custnumProp.put(SchemaColumnProperties.Label, "CustNum");
		custnumProp.put(SchemaColumnProperties.Tooltip, "");
		custnumProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("custnum", custnumProp);

		Map<SchemaColumnProperties, String> discountProp = new HashMap<SchemaColumnProperties, String>();
		discountProp.put(SchemaColumnProperties.ReadOnly, "");
		discountProp.put(SchemaColumnProperties.Format, "->.>>>.>>9");
		discountProp.put(SchemaColumnProperties.Type, "integer");
		discountProp.put(SchemaColumnProperties.DefaultValue, "0");
		discountProp.put(SchemaColumnProperties.Required, "false");
		discountProp.put(SchemaColumnProperties.Sortable, "false");
		discountProp.put(SchemaColumnProperties.Label, "Discount");
		discountProp.put(SchemaColumnProperties.Tooltip, "");
		discountProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("discount", discountProp);

		Map<SchemaColumnProperties, String> emailaddressProp = new HashMap<SchemaColumnProperties, String>();
		emailaddressProp.put(SchemaColumnProperties.ReadOnly, "");
		emailaddressProp.put(SchemaColumnProperties.Format, "x(8)");
		emailaddressProp.put(SchemaColumnProperties.Type, "character");
		emailaddressProp.put(SchemaColumnProperties.DefaultValue, "");
		emailaddressProp.put(SchemaColumnProperties.Required, "false");
		emailaddressProp.put(SchemaColumnProperties.Sortable, "false");
		emailaddressProp.put(SchemaColumnProperties.Label, "EmailAddress");
		emailaddressProp.put(SchemaColumnProperties.Tooltip, "");
		emailaddressProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("emailaddress", emailaddressProp);

		Map<SchemaColumnProperties, String> faxProp = new HashMap<SchemaColumnProperties, String>();
		faxProp.put(SchemaColumnProperties.ReadOnly, "");
		faxProp.put(SchemaColumnProperties.Format, "x(8)");
		faxProp.put(SchemaColumnProperties.Type, "character");
		faxProp.put(SchemaColumnProperties.DefaultValue, "");
		faxProp.put(SchemaColumnProperties.Required, "false");
		faxProp.put(SchemaColumnProperties.Sortable, "false");
		faxProp.put(SchemaColumnProperties.Label, "Fax");
		faxProp.put(SchemaColumnProperties.Tooltip, "");
		faxProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("fax", faxProp);

		Map<SchemaColumnProperties, String> nameProp = new HashMap<SchemaColumnProperties, String>();
		nameProp.put(SchemaColumnProperties.ReadOnly, "");
		nameProp.put(SchemaColumnProperties.Format, "x(8)");
		nameProp.put(SchemaColumnProperties.Type, "character");
		nameProp.put(SchemaColumnProperties.DefaultValue, "");
		nameProp.put(SchemaColumnProperties.Required, "false");
		nameProp.put(SchemaColumnProperties.Sortable, "false");
		nameProp.put(SchemaColumnProperties.Label, "Name");
		nameProp.put(SchemaColumnProperties.Tooltip, "");
		nameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("name", nameProp);

		Map<SchemaColumnProperties, String> phoneProp = new HashMap<SchemaColumnProperties, String>();
		phoneProp.put(SchemaColumnProperties.ReadOnly, "");
		phoneProp.put(SchemaColumnProperties.Format, "x(8)");
		phoneProp.put(SchemaColumnProperties.Type, "character");
		phoneProp.put(SchemaColumnProperties.DefaultValue, "");
		phoneProp.put(SchemaColumnProperties.Required, "false");
		phoneProp.put(SchemaColumnProperties.Sortable, "false");
		phoneProp.put(SchemaColumnProperties.Label, "Phone");
		phoneProp.put(SchemaColumnProperties.Tooltip, "");
		phoneProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("phone", phoneProp);

		Map<SchemaColumnProperties, String> postalcodeProp = new HashMap<SchemaColumnProperties, String>();
		postalcodeProp.put(SchemaColumnProperties.ReadOnly, "");
		postalcodeProp.put(SchemaColumnProperties.Format, "x(8)");
		postalcodeProp.put(SchemaColumnProperties.Type, "character");
		postalcodeProp.put(SchemaColumnProperties.DefaultValue, "");
		postalcodeProp.put(SchemaColumnProperties.Required, "false");
		postalcodeProp.put(SchemaColumnProperties.Sortable, "false");
		postalcodeProp.put(SchemaColumnProperties.Label, "PostalCode");
		postalcodeProp.put(SchemaColumnProperties.Tooltip, "");
		postalcodeProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("postalcode", postalcodeProp);

		Map<SchemaColumnProperties, String> salesrepProp = new HashMap<SchemaColumnProperties, String>();
		salesrepProp.put(SchemaColumnProperties.ReadOnly, "");
		salesrepProp.put(SchemaColumnProperties.Format, "x(8)");
		salesrepProp.put(SchemaColumnProperties.Type, "character");
		salesrepProp.put(SchemaColumnProperties.DefaultValue, "");
		salesrepProp.put(SchemaColumnProperties.Required, "false");
		salesrepProp.put(SchemaColumnProperties.Sortable, "false");
		salesrepProp.put(SchemaColumnProperties.Label, "SalesRep");
		salesrepProp.put(SchemaColumnProperties.Tooltip, "");
		salesrepProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("salesrep", salesrepProp);

		Map<SchemaColumnProperties, String> stateProp = new HashMap<SchemaColumnProperties, String>();
		stateProp.put(SchemaColumnProperties.ReadOnly, "");
		stateProp.put(SchemaColumnProperties.Format, "x(8)");
		stateProp.put(SchemaColumnProperties.Type, "character");
		stateProp.put(SchemaColumnProperties.DefaultValue, "");
		stateProp.put(SchemaColumnProperties.Required, "false");
		stateProp.put(SchemaColumnProperties.Sortable, "false");
		stateProp.put(SchemaColumnProperties.Label, "State");
		stateProp.put(SchemaColumnProperties.Tooltip, "");
		stateProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("state", stateProp);

		Map<SchemaColumnProperties, String> termsProp = new HashMap<SchemaColumnProperties, String>();
		termsProp.put(SchemaColumnProperties.ReadOnly, "");
		termsProp.put(SchemaColumnProperties.Format, "x(8)");
		termsProp.put(SchemaColumnProperties.Type, "character");
		termsProp.put(SchemaColumnProperties.DefaultValue, "");
		termsProp.put(SchemaColumnProperties.Required, "false");
		termsProp.put(SchemaColumnProperties.Sortable, "false");
		termsProp.put(SchemaColumnProperties.Label, "Terms");
		termsProp.put(SchemaColumnProperties.Tooltip, "");
		termsProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("terms", termsProp);
		
		Map<SchemaColumnProperties, String> statenameProp = new HashMap<SchemaColumnProperties, String>();
		statenameProp.put(SchemaColumnProperties.ReadOnly, "");
		statenameProp.put(SchemaColumnProperties.Format, "x(8)");
		statenameProp.put(SchemaColumnProperties.Type, "character");
		statenameProp.put(SchemaColumnProperties.DefaultValue, "");
		statenameProp.put(SchemaColumnProperties.Required, "false");
		statenameProp.put(SchemaColumnProperties.Sortable, "false");
		statenameProp.put(SchemaColumnProperties.Label, "State");
		statenameProp.put(SchemaColumnProperties.Tooltip, "");
		statenameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("statename", statenameProp);
		
		Map<SchemaColumnProperties, String> salesrepnameProp = new HashMap<SchemaColumnProperties, String>();
		salesrepnameProp.put(SchemaColumnProperties.ReadOnly, "");
		salesrepnameProp.put(SchemaColumnProperties.Format, "x(8)");
		salesrepnameProp.put(SchemaColumnProperties.Type, "character");
		salesrepnameProp.put(SchemaColumnProperties.DefaultValue, "");
		salesrepnameProp.put(SchemaColumnProperties.Required, "false");
		salesrepnameProp.put(SchemaColumnProperties.Sortable, "false");
		salesrepnameProp.put(SchemaColumnProperties.Label, "Sales Rep.");
		salesrepnameProp.put(SchemaColumnProperties.Tooltip, "");
		salesrepnameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("salesrepname", salesrepnameProp);
		
		
	}
	
	
}

