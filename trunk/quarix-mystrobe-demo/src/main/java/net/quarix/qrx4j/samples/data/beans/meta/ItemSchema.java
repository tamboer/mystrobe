package net.quarix.qrx4j.samples.data.beans.meta;

import java.util.LinkedHashMap;
import net.mystrobe.client.connector.quarixbackend.Generated;
import net.mystrobe.client.impl.DAOSchema;
import net.mystrobe.client.SchemaColumnProperties;
import java.util.Map;
import net.quarix.qrx4j.samples.data.beans.Item;
import net.mystrobe.client.connector.quarixbackend.GeneratorMeta;
import java.util.HashMap;

/**
 *
 * This class was generated by net.mystrobe.client.connector.quarixbackend.ClassGenerator
 *
 * Used parameters:
 *		appName: mystrobe
 *		 dsName: wicketds.server.dmitem
 *		 doName: ttitem
 *
 */

@GeneratorMeta(appName="mystrobe", urn="wicketds.server.dmitem", dsName="wicketds.server.dmitem", dsId="daitem", daoId="ttitem", isLocked=false)
public class ItemSchema extends DAOSchema<Item> {

	@Generated
	public enum Cols {
		
		SORTORDER("sortorder"),
		CATDESCRIPTION("catdescription"),
		ITEMNAME("itemname"),
		ITEMNUM("itemnum"),
		PRICE("price"),
		WEIGHT("weight"),
		CATEGORY1("category1"),
		CATEGORY2("category2")
		;

		private String columnName;
			
		private Cols(String columnName) {
			this.columnName = columnName;
		}

		public String id() {
			return columnName;
		}	

		public String toString() {
			return columnName;
		}
	}

	@Generated
	public ItemSchema() {
		assignValues();
	}

	@Generated
	protected void assignValues() {
		super.assignValues();
		daoId = "ttitem";
		iDataTypeClass = Item.class;
		margin = 5;
		isAutosync = true;
		isSetFilterEveryTime = true;

		properties = new LinkedHashMap<String, Map<SchemaColumnProperties, String>>();

		Map<SchemaColumnProperties, String> rowidProp = new HashMap<SchemaColumnProperties, String>();
		rowidProp.put(SchemaColumnProperties.ReadOnly, "");
		rowidProp.put(SchemaColumnProperties.Format, "");
		rowidProp.put(SchemaColumnProperties.Type, "character");
		rowidProp.put(SchemaColumnProperties.DefaultValue, "");
		rowidProp.put(SchemaColumnProperties.Required, "");
		rowidProp.put(SchemaColumnProperties.Sortable, "");
		rowidProp.put(SchemaColumnProperties.Label, "");
		rowidProp.put(SchemaColumnProperties.Tooltip, "");
		rowidProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowid", rowidProp);

		Map<SchemaColumnProperties, String> rowstateProp = new HashMap<SchemaColumnProperties, String>();
		rowstateProp.put(SchemaColumnProperties.ReadOnly, "");
		rowstateProp.put(SchemaColumnProperties.Format, "");
		rowstateProp.put(SchemaColumnProperties.Type, "integer");
		rowstateProp.put(SchemaColumnProperties.DefaultValue, "0");
		rowstateProp.put(SchemaColumnProperties.Required, "");
		rowstateProp.put(SchemaColumnProperties.Sortable, "");
		rowstateProp.put(SchemaColumnProperties.Label, "");
		rowstateProp.put(SchemaColumnProperties.Tooltip, "");
		rowstateProp.put(SchemaColumnProperties.ViewAs, "");
		properties.put("rowstate", rowstateProp);

		Map<SchemaColumnProperties, String> sortorderProp = new HashMap<SchemaColumnProperties, String>();
		sortorderProp.put(SchemaColumnProperties.ReadOnly, "");
		sortorderProp.put(SchemaColumnProperties.Format, "->,>>>,>>9");
		sortorderProp.put(SchemaColumnProperties.Type, "integer");
		sortorderProp.put(SchemaColumnProperties.DefaultValue, "0");
		sortorderProp.put(SchemaColumnProperties.Required, "false");
		sortorderProp.put(SchemaColumnProperties.Sortable, "true ");
		sortorderProp.put(SchemaColumnProperties.Label, "SortOrder");
		sortorderProp.put(SchemaColumnProperties.Tooltip, "");
		sortorderProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("sortorder", sortorderProp);

		Map<SchemaColumnProperties, String> catdescriptionProp = new HashMap<SchemaColumnProperties, String>();
		catdescriptionProp.put(SchemaColumnProperties.ReadOnly, "");
		catdescriptionProp.put(SchemaColumnProperties.Format, "x(8)");
		catdescriptionProp.put(SchemaColumnProperties.Type, "character");
		catdescriptionProp.put(SchemaColumnProperties.DefaultValue, "");
		catdescriptionProp.put(SchemaColumnProperties.Required, "false");
		catdescriptionProp.put(SchemaColumnProperties.Sortable, "false");
		catdescriptionProp.put(SchemaColumnProperties.Label, "CatDescription");
		catdescriptionProp.put(SchemaColumnProperties.Tooltip, "");
		catdescriptionProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("catdescription", catdescriptionProp);

		Map<SchemaColumnProperties, String> itemnameProp = new HashMap<SchemaColumnProperties, String>();
		itemnameProp.put(SchemaColumnProperties.ReadOnly, "");
		itemnameProp.put(SchemaColumnProperties.Format, "x(8)");
		itemnameProp.put(SchemaColumnProperties.Type, "character");
		itemnameProp.put(SchemaColumnProperties.DefaultValue, "");
		itemnameProp.put(SchemaColumnProperties.Required, "false");
		itemnameProp.put(SchemaColumnProperties.Sortable, "false");
		itemnameProp.put(SchemaColumnProperties.Label, "ItemName");
		itemnameProp.put(SchemaColumnProperties.Tooltip, "");
		itemnameProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("itemname", itemnameProp);

		Map<SchemaColumnProperties, String> itemnumProp = new HashMap<SchemaColumnProperties, String>();
		itemnumProp.put(SchemaColumnProperties.ReadOnly, "");
		itemnumProp.put(SchemaColumnProperties.Format, "->,>>>,>>9");
		itemnumProp.put(SchemaColumnProperties.Type, "integer");
		itemnumProp.put(SchemaColumnProperties.DefaultValue, "0");
		itemnumProp.put(SchemaColumnProperties.Required, "false");
		itemnumProp.put(SchemaColumnProperties.Sortable, "true ");
		itemnumProp.put(SchemaColumnProperties.Label, "Itemnum");
		itemnumProp.put(SchemaColumnProperties.Tooltip, "");
		itemnumProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("itemnum", itemnumProp);

		Map<SchemaColumnProperties, String> priceProp = new HashMap<SchemaColumnProperties, String>();
		priceProp.put(SchemaColumnProperties.ReadOnly, "");
		priceProp.put(SchemaColumnProperties.Format, "->>,>>9.99");
		priceProp.put(SchemaColumnProperties.Type, "decimal");
		priceProp.put(SchemaColumnProperties.DefaultValue, "0,00");
		priceProp.put(SchemaColumnProperties.Required, "false");
		priceProp.put(SchemaColumnProperties.Sortable, "false");
		priceProp.put(SchemaColumnProperties.Label, "Price");
		priceProp.put(SchemaColumnProperties.Tooltip, "");
		priceProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("price", priceProp);

		Map<SchemaColumnProperties, String> weightProp = new HashMap<SchemaColumnProperties, String>();
		weightProp.put(SchemaColumnProperties.ReadOnly, "");
		weightProp.put(SchemaColumnProperties.Format, "->>,>>9.99");
		weightProp.put(SchemaColumnProperties.Type, "decimal");
		weightProp.put(SchemaColumnProperties.DefaultValue, "0,00");
		weightProp.put(SchemaColumnProperties.Required, "false");
		weightProp.put(SchemaColumnProperties.Sortable, "false");
		weightProp.put(SchemaColumnProperties.Label, "Weight");
		weightProp.put(SchemaColumnProperties.Tooltip, "");
		weightProp.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("weight", weightProp);

		Map<SchemaColumnProperties, String> category1Prop = new HashMap<SchemaColumnProperties, String>();
		category1Prop.put(SchemaColumnProperties.ReadOnly, "");
		category1Prop.put(SchemaColumnProperties.Format, "x(8)");
		category1Prop.put(SchemaColumnProperties.Type, "character");
		category1Prop.put(SchemaColumnProperties.DefaultValue, "");
		category1Prop.put(SchemaColumnProperties.Required, "false");
		category1Prop.put(SchemaColumnProperties.Sortable, "false");
		category1Prop.put(SchemaColumnProperties.Label, "Category1");
		category1Prop.put(SchemaColumnProperties.Tooltip, "");
		category1Prop.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("category1", category1Prop);

		Map<SchemaColumnProperties, String> category2Prop = new HashMap<SchemaColumnProperties, String>();
		category2Prop.put(SchemaColumnProperties.ReadOnly, "");
		category2Prop.put(SchemaColumnProperties.Format, "x(8)");
		category2Prop.put(SchemaColumnProperties.Type, "character");
		category2Prop.put(SchemaColumnProperties.DefaultValue, "");
		category2Prop.put(SchemaColumnProperties.Required, "false");
		category2Prop.put(SchemaColumnProperties.Sortable, "false");
		category2Prop.put(SchemaColumnProperties.Label, "Category2");
		category2Prop.put(SchemaColumnProperties.Tooltip, "");
		category2Prop.put(SchemaColumnProperties.ViewAs, "fill-in");
		properties.put("category2", category2Prop);
	}
	
}

